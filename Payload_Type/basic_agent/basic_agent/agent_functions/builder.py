from mythic_container.PayloadBuilder import *
from mythic_container.MythicCommandBase import *
import pathlib
import os
import tempfile
import shutil
import subprocess

class BasicAgent(PayloadType):
    name = "basic_agent"
    file_extension = "bin"
    author = "@its_a_feature_"
    supported_os = [SupportedOS.Linux]
    wrapper = False
    wrapped_payloads = []
    description = "A basic Linux agent that maintains HTTP C2 and executes ls command"
    supports_dynamic_loading = True
    c2_profiles = ["http"]
    mythic_encrypts = True
    translation_container = None
    build_parameters = []
    agent_path = pathlib.Path(".") / "basic_agent"
    agent_code_path = agent_path / "agent_code"
    agent_icon_path = pathlib.Path(".") / "basic_agent" / "agent_functions" / "basic_python_agent.svg"
    build_steps = [
        BuildStep(step_name="Gathering Files", step_description="Copying agent code"),
        BuildStep(step_name="Generating Binary", step_description="Compiling with PyInstaller")
    ]

    async def build(self) -> BuildResponse:
        resp = BuildResponse(status=BuildStatus.Success)
        try:
            # Create a temporary directory for building
            with tempfile.TemporaryDirectory() as temp_dir:
                # Copy agent code
                src_path = self.agent_code_path / "base" / "agent_main.py"
                dest_path = os.path.join(temp_dir, "agent_main.py")
                shutil.copy(src_path, dest_path)

                # Copy HTTP C2 profile
                src_http = self.agent_code_path / "c2_profiles" / "http.py"
                dest_http_dir = os.path.join(temp_dir, "c2_profiles")
                os.makedirs(dest_http_dir, exist_ok=True)
                shutil.copy(src_http, os.path.join(dest_http_dir, "http.py"))

                # Run PyInstaller to compile the agent into a binary
                output_binary = os.path.join(temp_dir, "basic_agent")
                pyinstaller_cmd = [
                    "pyinstaller",
                    "--onefile",
                    "--hidden-import=requests",
                    "--distpath", temp_dir,
                    "--workpath", os.path.join(temp_dir, "build"),
                    "--specpath", os.path.join(temp_dir, "spec"),
                    "--name", "basic_agent",
                    dest_path
                ]
                result = subprocess.run(pyinstaller_cmd, capture_output=True, text=True)
                if result.returncode != 0:
                    raise Exception(f"PyInstaller failed: {result.stderr}")

                # Verify the binary exists
                if not os.path.exists(output_binary):
                    raise Exception("Binary not generated by PyInstaller")

                # Read the binary and set as payload
                with open(output_binary, "rb") as f:
                    resp.Payload = f.read()

        except Exception as e:
            resp.Status = BuildStatus.Error
            resp.Message = f"Build failed: {str(e)}"
        return resp